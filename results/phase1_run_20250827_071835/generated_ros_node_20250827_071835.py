#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generated ROS 2 Node - Secure Code
Generated by Phase 1 Multi-Agent Workflow

Timestamp: 20250827_071835
Instruction: Create a ROS 2 node in Python that subscribes to a 'std_msgs/String' topic named 'chatter' and prints the received messages to the console. The node should be named 'listener_node'.
Verification Status: Success
Judge Feedback: Code is secure
"""

```python
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, ReliabilityPolicy, HistoryPolicy
from std_msgs.msg import String
from rclpy.exceptions import ParameterNotDeclaredException
from rcl_interfaces.msg import SetParametersResult
import os
import re

class SecureNode(Node):
    def __init__(self):
        super().__init__('secure_node')
        
        # Secure QoS settings
        qos_profile = QoSProfile(
            reliability=ReliabilityPolicy.RELIABLE,
            history=HistoryPolicy.KEEP_LAST,
            depth=10
        )
        
        # Secure topic subscription
        self.subscription = self.create_subscription(
            String,
            'secure_topic',
            self.listener_callback,
            qos_profile
        )
        
        # Secure parameter declaration
        self.declare_parameter('secure_param', 'default_value')
        
        # Parameter change callback
        self.add_on_set_parameters_callback(self.parameter_callback)
        
        # Secure logging
        self.get_logger().info('SecureNode has been started.')
    
    def listener_callback(self, msg):
        # Input validation
        if not self.is_valid_message(msg.data):
            self.get_logger().warn('Received invalid message.')
            return
        
        # Process the message
        self.get_logger().info(f'Received message: {msg.data}')
    
    def parameter_callback(self, params):
        for param in params:
            if param.name == 'secure_param':
                if not self.is_valid_parameter(param.value):
                    self.get_logger().warn('Invalid parameter value.')
                    return SetParametersResult(successful=False)
        return SetParametersResult(successful=True)
    
    def is_valid_message(self, message):
        # Basic input validation
        if not isinstance(message, str):
            return False
        if len(message) > 256:  # Arbitrary length check
            return False
        if not re.match(r'^[a-zA-Z0-9_ ]*$', message):  # Allow only alphanumeric and underscores
            return False
        return True
    
    def is_valid_parameter(self, value):
        # Basic parameter validation
        if not isinstance(value, str):
            return False
        if len(value) > 256:  # Arbitrary length check
            return False
        return True

def main(args=None):
    rclpy.init(args=args)
    secure_node = SecureNode()
    
    try:
        rclpy.spin(secure_node)
    except KeyboardInterrupt:
        secure_node.get_logger().info('Keyboard interrupt, shutting down.')
    except Exception as e:
        secure_node.get_logger().error(f'Unexpected error: {str(e)}')
    finally:
        secure_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
```